这是以前那个惨死在我手上的liut-common-lisp解释器的后继者，不可避免地我会从之前那个失败作品的身上吸收一些教训和经验并运用在这里，所以我还是要感谢那个失败品的。

这是一个有志于成为一个Lisp解释器的程序，由于本人技术有限，看龙书不认真没耐性以至于看了不超过十页就开始写这东西。其实想想也没什么，以前写那个liut-common-lisp的时候貌似还什么书都没看呢——虽然看了几页龙书对我也没什么帮助。

暂定目标语言的特性有：
● 变量名和函数名使用相同的命名空间
● 不支持可选参数和关键字参数
● 用哈希表来实现符号查找表，不然用链表实在是低效，尽管还没感觉得出来。
● 如果可以做到的话，把所有类型都弄成类，所有函数也都是generic的，这样就可以优雅地发挥CLOS的能力了，哇咔咔～～～
● 要有正则表达式功能吧
● 哈希表用起来也不要像CommonLisp原本的那么蛋疼……

目前做到的功能有：
● car、cdr、cons等函数，具体请看primitives.c文件中的init_primitives()函数的定义
● 列表的结束没有nil，最后一个节点的cdr为C语言中的NULL
● 每一个符号对象都是唯一的，当遇到已经有的符号时会从查找表中找出已经生成的对象来返回。